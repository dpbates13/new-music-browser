{"version":3,"sources":["landingPage.js","GenreButton.js","GenreItem.js","Mainpage.js","App.js","index.js"],"names":["LandingPage","this","props","loaded","className","role","class","to","Component","GenreButton","name","genre","type","onClick","selectGenre","AlbumItem","src","album","images","url","alt","artists","href","uri","Mainpage","state","selected","idsUsed","input","React","createRef","id","setState","genreName","re","RegExp","replace","listFromGenreName","i","genreList","length","search","push","onSubmit","e","preventDefault","current","value","ref","aria-label","map","key","albumDatabase","genres","includes","App","bearer","artistDatabase","data","grant_type","Promise","resolve","reject","fetch","method","headers","Authorization","body","URLSearchParams","then","res","json","newBearer","access_token","console","log","Accept","response","status","r","responseJson","albums","items","next","createAlbumDatabase","strArr","artStr","count","artist","hasOwnProperty","prevState","getArtists","j","x","getToken","createArtistStrings","addGenreData","createGenreList","openSite","path","exact","component","render","ReactDOM","basename","window","location","pathname","document","getElementById"],"mappings":"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","file":"static/js/main.c85536c0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass LandingPage extends Component {\n  render() {\n    if (this.props.loaded == 0) {\n      return (\n        <header className=\"loading\" role=\"banner\">\n          <h2>Welcome to the Spotify New Music Browser</h2>\n          <p>\n            This website allows you to find albums released on Spotify that\n            don't show up on Spotify's New Releases page. It also sorts them by\n            genre, so that you don't have to waste time looking through music\n            that doesn't interest you.\n          </p>\n          <p class=\"subGenreLoad\">\n            Please wait while data is loaded from Spotify...\n          </p>\n        </header>\n      );\n    } else {\n      return (\n        <header className=\"loading\" role=\"banner\">\n          <h2>Welcome to the Spotify New Music Browser</h2>\n          <p>\n            This website allows you to find albums released on Spotify that\n            don't show up on Spotify's New Releases page. It also sorts them by\n            genre, so that you don't have to waste time looking through music\n            that doesn't interest you.\n          </p>\n          <Link to=\"/Main\" className=\"genreButton\">\n            Enter Site\n          </Link>\n        </header>\n      );\n    }\n  }\n}\n\nexport default LandingPage;\n","import React from \"react\";\n\nexport default function GenreButton(props) {\n  return (\n    <button\n      name={props.genre}\n      type=\"button\"\n      onClick={props.selectGenre}\n      className=\"genreButton\"\n    >\n      {props.genre}\n    </button>\n  );\n}\n","import React, { Component } from \"react\";\n\nclass AlbumItem extends Component {\n  render() {\n    return (\n      <div className=\"albumElement\">\n        <img\n          src={this.props.album.images[0].url}\n          alt={`${this.props.album.name} by ${this.props.album.artists[0].name}`}\n        ></img>\n        <a className=\"album\" href={this.props.album.uri}>\n          {this.props.album.name}\n        </a>\n        <p className=\"artist\">{this.props.album.artists[0].name}</p>\n        {/*<h1>{this.props.genre}</h1>\n        <ul>\n          {this.props.albumDatabase.map((album) => {\n            if (album.genres.includes(this.props.genre)) {\n              return <h3>{album.name}</h3>;\n            }\n          })}\n        </ul>*/}\n      </div>\n    );\n  }\n}\n\nexport default AlbumItem;\n","import React, { Component } from \"react\";\nimport GenreButton from \"./GenreButton\";\n//import GenreItem from \"./GenreItem\";\nimport AlbumItem from \"./GenreItem\";\n\nclass Mainpage extends Component {\n  constructor(props) {\n    super();\n    this.input = React.createRef();\n  }\n  state = {\n    selected: [],\n    idsUsed: [],\n  };\n  addIds(id) {\n    this.setState({ idsUsed: [...this.state.idsUsed, id] });\n  }\n  selectGenre(genreName) {\n    let albumCount = 0;\n    const re = new RegExp(genreName.replace(\"amp;\", \"\"));\n    let listFromGenreName = [];\n    for (let i = 0; i < this.props.genreList.length; i++) {\n      if (this.props.genreList[i].search(re) > -1) {\n        listFromGenreName.push(this.props.genreList[i]);\n      }\n    }\n    this.setState({ selected: listFromGenreName });\n  }\n  /*selectGenre = (e) => {\n    e.preventDefault();\n    const genreKeyWord = e.target.name;\n    console.log(e.target);\n    console.log(genreKeyWord);\n  };*/\n\n  render() {\n    const idsUsed = [];\n    return (\n      <div className=\"content\">\n        <h1>Please select a genre below</h1>\n        <p className=\"instructions\">\n          This will display albums associated with that genre, sorted by\n          subgenre\n        </p>\n        <ul className=\"keyGenres\">\n          <GenreButton\n            genre=\"hip hop\"\n            selectGenre={() => this.selectGenre(\"hip hop\")}\n          />\n          <GenreButton\n            genre=\"r&b\"\n            selectGenre={() => this.selectGenre(\"r&b\")}\n          />\n          <GenreButton\n            genre=\"pop\"\n            selectGenre={() => this.selectGenre(\"pop\")}\n          />\n          <GenreButton\n            genre=\"dance\"\n            selectGenre={() => this.selectGenre(\"dance\")}\n          />\n          <GenreButton\n            genre=\"edm\"\n            selectGenre={() => this.selectGenre(\"edm\")}\n          />\n          <GenreButton\n            genre=\"electronic\"\n            selectGenre={() => this.selectGenre(\"electronic\")}\n          />\n          <GenreButton\n            genre=\"trap\"\n            selectGenre={() => this.selectGenre(\"trap\")}\n          />\n          <GenreButton\n            genre=\"rock\"\n            selectGenre={() => this.selectGenre(\"rock\")}\n          />\n          <GenreButton\n            genre=\"metal\"\n            selectGenre={() => this.selectGenre(\"metal\")}\n          />\n          <GenreButton\n            genre=\"punk\"\n            selectGenre={() => this.selectGenre(\"punk\")}\n          />\n          <GenreButton\n            genre=\"folk\"\n            selectGenre={() => this.selectGenre(\"folk\")}\n          />\n          <GenreButton\n            genre=\"country\"\n            selectGenre={() => this.selectGenre(\"country\")}\n          />\n          <GenreButton\n            genre=\"reggaeton\"\n            selectGenre={() => this.selectGenre(\"reggaeton\")}\n          />\n          <GenreButton\n            genre=\"latin\"\n            selectGenre={() => this.selectGenre(\"latin\")}\n          />\n          <GenreButton\n            genre=\"classical\"\n            selectGenre={() => this.selectGenre(\"classical\")}\n          />\n          <GenreButton\n            genre=\"alternative\"\n            selectGenre={() => this.selectGenre(\"alternative\")}\n          />\n          <GenreButton\n            genre=\"indie\"\n            selectGenre={() => this.selectGenre(\"indie\")}\n          />\n        </ul>\n        <p className=\"instructions\">Or enter your own search term</p>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            this.selectGenre(this.input.current.value);\n          }}\n          className=\"keySearch\"\n        >\n          <input\n            id=\"text\"\n            type=\"text\"\n            ref={this.input}\n            aria-label=\"Genre Search\"\n          ></input>\n          <button type=\"submit\" className=\"submit\">\n            Search Genres\n          </button>\n        </form>\n        <div /*className=\"subGenres\"*/>\n          <ul className=\"subGenres\">\n            {this.state.selected.map((genre) => (\n              <GenreButton\n                key={genre}\n                genre={genre}\n                selectGenre={() => this.selectGenre(genre)}\n              />\n            ))}\n          </ul>\n        </div>\n        <div className=\"showAlbums\">\n          {this.state.selected.map((genre) => (\n            <div className=\"genreDiv\">\n              <h1>{genre}</h1>\n              <div className=\"albumElements\">\n                {this.props.albumDatabase.map((album) => {\n                  if (\n                    album.genres.includes(genre) &&\n                    !idsUsed.includes(album.id)\n                  ) {\n                    idsUsed.push(album.id);\n                    //console.log(!this.state.idsUsed.includes(album.id));\n                    return (\n                      <AlbumItem\n                        //addId={() => this.addIds(album.id)}\n                        album={album}\n                      />\n                    );\n                  }\n                })}\n              </div>\n            </div>\n\n            //console.log(\"component is going\");\n            /*<GenreItem\n                key={genre}\n                genre={genre}\n                idsUsed={this.state.idsUsed}\n                albumDatabase={this.props.albumDatabase}\n                genreList={this.props.genreList}\n            />*/\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Mainpage;\n","import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport LandingPage from \"./landingPage\";\nimport Mainpage from \"./Mainpage\";\n\nclass App extends Component {\n  state = {\n    bearer: \"\",\n    albumDatabase: [],\n    artistDatabase: {},\n    genreList: [],\n    url: \"https://api.spotify.com/v1/search?q=tag%3Anew&type=album&limit=50\",\n    loaded: 0,\n  };\n  getToken() {\n    const data = { grant_type: \"client_credentials\" };\n    return new Promise((resolve, reject) => {\n      fetch(`https://accounts.spotify.com/api/token`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          Authorization:\n            \"Basic NWYxNmE2ZjZjZTA2NDBmZTllNTVhNTQ5NTNiOGJlNzY6YWEzMmNhZTEzZjI3NGRjMGE1YWZlNWVmOTVmYWUzYmM=\",\n        },\n        body: new URLSearchParams(data),\n      })\n        .then((res) => res.json())\n        .then((res) => {\n          let newBearer = \"Bearer \" + res.access_token;\n          this.setState({ bearer: newBearer });\n          console.log(this.state.bearer);\n          resolve();\n        });\n    });\n  }\n  createAlbumDatabase(url) {\n    return new Promise((resolve, reject) =>\n      fetch(url, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: this.state.bearer,\n        },\n      })\n        .then((response) => {\n          if (response.status !== 200) {\n            if (response.status === 404 || 401) {\n              resolve(this.state.albumDatabase);\n            } else {\n              throw `${response.status}: ${response.statusText}`;\n            }\n          }\n          const r = response.json();\n          console.log(r);\n          return r;\n        })\n        .then((responseJson) => {\n          //let idCount = 0;\n          for (let i = 0; i < responseJson.albums.items.length; i++) {\n            if (responseJson.albums.items[i] != null) {\n              this.setState({\n                albumDatabase: [\n                  ...this.state.albumDatabase,\n                  responseJson.albums.items[i],\n                ],\n              });\n            }\n            /*if (responseJson.albums.items[i] == null) {\n              let z = 0;\n            } else {\n              this.setState({\n                albumDatabase: [\n                  ...this.state.albumDatabase,\n                  responseJson.albums.items[i],\n                ],\n              });\n            }*/\n          }\n          //idCount++;\n          if (\n            responseJson.albums.next !==\n            \"https://api.spotify.com/v1/search?query=tag%3Anew&type=album&offset=2000&limit=50\"\n          ) {\n            console.log(responseJson.albums.next);\n            resolve(this.createAlbumDatabase(responseJson.albums.next));\n          } else {\n            resolve();\n          }\n        })\n    );\n  }\n  createArtistStrings(data) {\n    let strArr = [];\n    let artStr = \"\";\n    let count = 0;\n    console.log(data[0].artists[0].id);\n    for (let i = 0; i < data.length; i++) {\n      for (const artist in data[i].artists) {\n        if (count === 49) {\n          artStr += `${data[i].artists[artist].id}`;\n          strArr.push(artStr);\n          artStr = \"\";\n          count = 0;\n        } else {\n          artStr += `${data[i].artists[artist].id},`;\n          count++;\n        }\n      }\n    }\n    console.log(strArr);\n    return strArr;\n  }\n  getArtists(data, count = 0) {\n    return new Promise((resolve, reject) => {\n      fetch(`https://api.spotify.com/v1/artists?ids=${data[count]}`, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: this.state.bearer,\n        },\n      })\n        .then((response) => {\n          const r = response.json();\n          console.log(r);\n          return r;\n        })\n        .then((response) => {\n          for (let i = 0; i < response.artists.length; i++) {\n            if (\n              !this.state.artistDatabase.hasOwnProperty(\n                `${response.artists[i].name}`\n              )\n            ) {\n              this.setState((prevState) => {\n                let artistDatabase = { ...prevState.artistDatabase };\n                artistDatabase[`${response.artists[i].name}`] =\n                  response.artists[i].genres;\n                return { artistDatabase };\n              });\n            }\n          }\n          /*for (let i = 0; i < response.artists.length; i++) {\n            if (\n              this.state.artistDatabase.hasOwnProperty(\n                `${response.artists[i].name}`\n              )\n            ) {\n              let fdsjhf = 0;\n            } else {\n              this.setState((prevState) => {\n                let artistDatabase = { ...prevState.artistDatabase };\n                artistDatabase[`${response.artists[i].name}`] =\n                  response.artists[i].genres;\n                return { artistDatabase };\n              });\n            }\n          }*/\n          count++;\n          if (count < data.length) {\n            resolve(this.getArtists(data, count));\n          } else {\n            resolve();\n          }\n        });\n    });\n  }\n  createGenreList() {\n    for (const artist in this.state.artistDatabase) {\n      for (let j = 0; j < this.state.artistDatabase[artist].length; j++) {\n        if (\n          this.state.genreList.includes(this.state.artistDatabase[artist][j]) ==\n          false\n        ) {\n          this.setState({\n            genreList: [\n              ...this.state.genreList,\n              this.state.artistDatabase[artist][j],\n            ],\n          });\n        }\n      }\n    }\n  }\n  addGenreData() {\n    console.log(this.state.albumDatabase);\n    console.log(this.state.albumDatabase[0].artists[0].name);\n    console.log(this.state.artistDatabase);\n    for (let x = 0; x < this.state.albumDatabase.length; x++) {\n      this.setState((prevState) => {\n        let albumDatabase = { ...prevState.albumDatabase };\n        albumDatabase[x].genres = [];\n      });\n    }\n    for (let i = 0; i < this.state.albumDatabase.length; i++) {\n      for (const artist in this.state.albumDatabase[i].artists) {\n        this.setState((prevState) => {\n          let albumDatabase = { ...prevState.albumDatabase };\n          for (const genre in this.state.artistDatabase[\n            this.state.albumDatabase[i].artists[artist].name\n          ]) {\n            albumDatabase[i].genres.push(\n              this.state.artistDatabase[\n                this.state.albumDatabase[i].artists[artist].name\n              ][genre]\n            );\n          }\n        });\n      }\n    }\n  }\n  openSite() {\n    this.setState({ loaded: 1 });\n  }\n  async componentDidMount() {\n    await this.getToken();\n    console.log(\"yeah we goin\");\n    await this.createAlbumDatabase(this.state.url);\n    console.log(this.state.albumDatabase);\n    await this.getArtists(this.createArtistStrings(this.state.albumDatabase));\n    this.addGenreData();\n    this.createGenreList();\n    this.openSite();\n  }\n  render() {\n    return (\n      <main>\n        <Route\n          path=\"/\"\n          exact\n          component={() => <LandingPage loaded={this.state.loaded} />}\n        />\n        <Route\n          path=\"/Main\"\n          render={() => (\n            <Mainpage\n              albumDatabase={this.state.albumDatabase}\n              genreList={this.state.genreList}\n            />\n          )}\n        />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter basename={window.location.pathname || \"\"}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}